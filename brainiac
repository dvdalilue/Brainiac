#!/usr/bin/env ruby

#################################
#Definicion del Main de Brainiac#
#################################

require_relative 'Lexer'
require_relative 'Parser'

def to_s_recursive(ast,prof)

  if !ast.class.eql?Array
    ast.attr_value.each do |name|
      if !(name[0] =~ /\A.*\./)
        if name[1].class.name =~ /\A\Tk.*/
          puts "#{prof}#{name[0].upcase}: #{name[1].text.upcase}"
        else
          puts "#{prof}#{name[0].upcase}: #{name[1].class.name}"
          to_s_recursive(name[1], "#{prof}  ")
        end
      end
    end
  else
    ast.each do |n|
      puts "#{prof}#{n.class.name.upcase}"
      to_s_recursive(n,"#{prof}  ")
    end
  end
end

def main
  input = File::read(ARGV[0]) #Lectura de entrada en un string
  input.force_encoding 'ASCII-8BIT'
  lexer = Lexer::new input
  lex_error = false
  goon = true
  while (goon) do
    begin
      goon = lexer.lex_catch
    rescue TypeError
      lex_error = true
    end
  end
  if lex_error==true then
    lexer.to_s
  else
    begin
      parser = Parser::new.parse(Lexer::new input) #Creacion de un parser
      
      $ErroresContexto = []
      
      parser.check
      unless $ErroresContexto.empty? then
        #to_s_recursive(parser," ")
        for e in $ErroresContexto
          puts e
        end
      else
        begin
          parser.exec
        rescue DynamicError => de 
          puts de 
        end
      end
    rescue SyntacticError => se
      puts se
    end
  end
end

main
